package vista;

import clases.Productos;
import clases.Proveedor;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import java.io.IOException;

/**
 *
 * @author Chrisp
 */
public class ProductosView extends javax.swing.JDialog {

    //Array Lits y objetos de clases determinadas
    Productos productos;
    ArrayList<Productos> lista;
    ArrayList<Proveedor> listaP;
    DefaultTableModel model;

    public ProductosView(java.awt.Frame parent, boolean modal, ArrayList<Productos> lista, ArrayList<Proveedor> listaP) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.lista = lista;
        this.listaP = listaP;
    }

    public ProductosView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDatos = new javax.swing.JPanel();
        lblCedula = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPuesto = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtCantDisponible = new javax.swing.JTextField();
        cmbProveedor = new javax.swing.JComboBox<>();
        txtCategoria = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        pnlBotones = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnTotalInventario = new javax.swing.JButton();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        lblCant = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();
        bntBuscarXCategoria = new javax.swing.JButton();
        btnGenerarPDF = new javax.swing.JButton();
        lblIndicaciónpdf = new javax.swing.JLabel();
        btnVerTDatos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de Productos ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Registros de Productos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        lblCedula.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCedula.setText("Código:");

        txtCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNombre.setText("Nombre:");

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblDireccion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDireccion.setText("Categoría:");

        lblTelefono.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTelefono.setText("Precio");

        lblEmail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblEmail.setText("CantidadDisponible");

        lblPuesto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPuesto.setText("Proveedor:");

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCedula)
                            .addComponent(lblNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDatosLayout.createSequentialGroup()
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTelefono))
                            .addGroup(pnlDatosLayout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEmail))))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addComponent(lblDireccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPuesto)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtCantDisponible, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbProveedor, javax.swing.GroupLayout.Alignment.LEADING, 0, 177, Short.MAX_VALUE)
                    .addComponent(txtPrecio))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedula)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefono)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtCantDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDireccion)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPuesto)
                    .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tblProductos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProductos.getTableHeader().setReorderingAllowed(false);
        tblProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblProductosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblProductos);

        pnlBotones.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnInsertar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insert.png"))); // NOI18N
        btnInsertar.setText("Insertar");
        btnInsertar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clean.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnTotalInventario.setText("Total Inventario");
        btnTotalInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalInventarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTotalInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnTotalInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBotonesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13))
        );

        lblBuscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblBuscar.setText("Buscar productos por categoria:");

        txtBuscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblCant.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCant.setText("Cantidad de registros:");

        txtCant.setEditable(false);
        txtCant.setBackground(new java.awt.Color(204, 204, 204));
        txtCant.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        bntBuscarXCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        bntBuscarXCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntBuscarXCategoriaActionPerformed(evt);
            }
        });

        btnGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDFActionPerformed(evt);
            }
        });

        btnVerTDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerTDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlBotones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bntBuscarXCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCant)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblIndicaciónpdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGenerarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVerTDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(pnlDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBuscar)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(bntBuscarXCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGenerarPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIndicaciónpdf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCant)
                                .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addComponent(btnVerTDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed

        try {

            if (Integer.parseInt(txtCodigo.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "El código debe ser un número positivo");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El código debe ser un número válido");
            return;
        }

        if (existe(Integer.parseInt(txtCodigo.getText()))) {
            JOptionPane.showMessageDialog(this, "El código ya existe");
            limpiar();
            return;
        }

        if (txtCodigo.getText().isEmpty() || txtNombre.getText().isEmpty()
                || txtCategoria.getText().isEmpty() || txtPrecio.getText().isEmpty()
                || txtCantDisponible.getText().isEmpty() || cmbProveedor.getSelectedItem() == null
                || cmbProveedor.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios");
            return;
        }

        try {
            if (Integer.parseInt(txtPrecio.getText()) <= 0) {
                JOptionPane.showMessageDialog(this, "El precio debe ser un número positivo");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El precio debe ser un número válido");
            return;
        }

        try {
            if (Integer.parseInt(txtCantDisponible.getText())
                    < 0) {
                JOptionPane.showMessageDialog(this, "La cantidad no puede ser negativa");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido");
            return;
        }

        Productos productos = new Productos();
        productos.setCodigo(Integer.parseInt(txtCodigo.getText()));
        productos.setNombre(txtNombre.getText());
        productos.setCategoria(txtCategoria.getText());
        productos.setPrecio(Integer.parseInt(txtPrecio.getText()));
        productos.setCantDisponible(Integer.parseInt(txtCantDisponible.getText()));
        productos.setProveedor(cmbProveedor.getSelectedItem().toString());

        EvaluarCantidadInsert();
        lista.add(productos);
        JOptionPane.showMessageDialog(this, "Producto agregado");
        mostrarTabla();
        btnLimpiarActionPerformed(null);

    }//GEN-LAST:event_btnInsertarActionPerformed

    private void tblProductosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosMousePressed
        if (evt.getClickCount() == 1) {
            txtCodigo.setText(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 0)));
            txtNombre.setText(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 1)));
            txtCategoria.setText(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 2)));
            txtPrecio.setText(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 3)));
            txtCantDisponible.setText(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 4)));
            cmbProveedor.setName(String.valueOf(tblProductos.getValueAt(tblProductos.getSelectedRow(), 5)));
        }
    }//GEN-LAST:event_tblProductosMousePressed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (tblProductos.getSelectedRowCount() == 1) {
            int resp = JOptionPane.showConfirmDialog(this, "¿Desea borrar el resgitro?");
            if (resp == 0) {  //El usuario quiere eliminar, Respuesta si
                int fila = tblProductos.getSelectedRow();
                if (lista.remove(lista.get(fila))) {
                    mostrarTabla();

                } else {
                    JOptionPane.showMessageDialog(this, "Error de borrado");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Se debe seleccionar 1 registro");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tblProductos.getSelectedRowCount() == 1) {
            int fila = tblProductos.getSelectedRow();
            productos = new Productos();

            if (!txtNombre.getText().isEmpty()) {
                try {
                    int codigo = Integer.parseInt(tblProductos.getValueAt(fila, 0).toString());
                    productos.setCodigo(codigo);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Código no válido para editar");
                    txtCodigo.setText("");
                    txtCodigo.requestFocus();
                    return;
                }

                productos.setNombre(txtNombre.getText());
                productos.setCategoria(txtCategoria.getText());

                try {
                    int precio = Integer.parseInt(txtPrecio.getText());
                    productos.setPrecio(precio);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Precio no válido para editar");
                    txtPrecio.setText("");
                    txtPrecio.requestFocus();
                    return;
                }

                try {
                    int cantDisponible = Integer.parseInt(txtCantDisponible.getText());
                    productos.setCantDisponible(cantDisponible);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Cantidad no válida para editar");
                    txtCantDisponible.setText("");
                    txtCantDisponible.requestFocus();
                    return;
                }

                productos.setProveedor((cmbProveedor.getItemAt(cmbProveedor.getSelectedIndex())));

                EvaluarCantidadEdit();
                if (lista.set(fila, productos) != null) {
                    JOptionPane.showMessageDialog(this, "Producto editado");
                    mostrarTabla();
                    btnLimpiarActionPerformed(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al editar");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Se debe seleccionar 1 registro");
        }
    }//GEN-LAST:event_btnEditarActionPerformed
    /**
     * Muestra los datos de otros JDialog acerca del puesto y la cédula del
     * Jefe, por medios de ComboBox
     *
     * @param evt
     */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        btnGenerarPDF.setVisible(false);
        btnVerTDatos.setVisible(false);
        if (cmbProveedor.getItemCount() <= 0) {
            for (Proveedor p : listaP) {
                cmbProveedor.addItem(p.getNombre());
            }
        }

        mostrarTabla();
    }//GEN-LAST:event_formWindowActivated

    private void bntBuscarXCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntBuscarXCategoriaActionPerformed
        boolean encontrado = false;

        if (txtBuscar.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No has digitado nada");
            lblIndicaciónpdf.setText("");
        }

        String titulos[] = {"Código", "Nombre", "Categoría",
            "Precio", "CantDisponible", "Proveedor", "FechaProductoIngresado"};
        model = new DefaultTableModel(null, titulos);

        for (int i = 0; i < lista.size(); i++) {
            productos = lista.get(i);

            if (productos.getCategoria().toLowerCase().contains(txtBuscar.getText().toLowerCase())) {
                Object nuevaFila[] = {productos.getCodigo(), productos.getNombre(),
                    productos.getCategoria(), productos.getPrecio(),
                    productos.getCantDisponible(), productos.getProveedor(),
                    productos.getFechaPIngresado()};
                model.addRow(nuevaFila);
                btnGenerarPDF.setVisible(true);
                btnVerTDatos.setVisible(true);
                lblIndicaciónpdf.setText("Imprimir todos los productos de " + productos.getCategoria() + " en PDF");
                btnGenerarPDF.setText("GenerarPDF");
                btnVerTDatos.setText("Todos los registros");
                encontrado = true;
            }
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(null, "La categoría no coincide con el nombre ingresado \nO no existe el producto");
            txtBuscar.setText("");
        }

        tblProductos.setModel(model);
        txtCant.setText(String.valueOf(model.getRowCount()));

    }//GEN-LAST:event_bntBuscarXCategoriaActionPerformed

    private void btnVerTDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerTDatosActionPerformed
        mostrarTabla();
        btnGenerarPDF.setVisible(false);
        btnVerTDatos.setVisible(false);
        lblIndicaciónpdf.setText("");
        txtBuscar.setText("");
    }//GEN-LAST:event_btnVerTDatosActionPerformed

    private void btnGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDFActionPerformed
        // Obtén el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tblProductos.getModel();

        // Verifica si hay filas visibles
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar al PDF.");
            return;
        }

        // Ruta del PDF (escritorio)
        String rutaEscritorio = System.getProperty("user.home") + "/Desktop/";
        String nombreCategoria = txtBuscar.getText().trim(); // Categoría buscada
        String nombreArchivo = "Productos_" + (nombreCategoria.isEmpty() ? "General" : nombreCategoria) + ".pdf";
        String rutaCompleta = rutaEscritorio + nombreArchivo;

        try {
            // Crear el PDF
            PdfWriter writer = new PdfWriter(rutaCompleta);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Agregar título
            document.add(new Paragraph("Reporte de Productos")
                    .setBold()
                    .setFontSize(16)
                    .setMarginBottom(10));
            document.add(new Paragraph("Categoría: " + (nombreCategoria.isEmpty() ? "Todos" : nombreCategoria))
                    .setFontSize(12)
                    .setMarginBottom(20));

            // Crear tabla en el PDF
            int columnCount = model.getColumnCount();
            float[] columnWidths = new float[columnCount];
            for (int i = 0; i < columnCount; i++) {
                columnWidths[i] = 100f; // Ajusta el ancho de las columnas si es necesario
            }
            Table pdfTable = new Table(columnWidths);

            // Agregar encabezados al PDF
            for (int i = 0; i < columnCount; i++) {
                pdfTable.addHeaderCell(model.getColumnName(i));
            }

            // Agregar datos visibles de la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < columnCount; j++) {
                    pdfTable.addCell(model.getValueAt(i, j).toString());
                }
            }

            // Agregar tabla al documento
            document.add(pdfTable);

            // Cerrar documento
            document.close();

            // Confirmar éxito
            JOptionPane.showMessageDialog(this, "PDF generado exitosamente en: " + rutaCompleta);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage());
            e.printStackTrace();
        }

        txtBuscar.setText("");
    }//GEN-LAST:event_btnGenerarPDFActionPerformed

    private void btnTotalInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalInventarioActionPerformed
        Productos.calcularTotalInventario(lista);
    }//GEN-LAST:event_btnTotalInventarioActionPerformed
    /**
     * Método para verificar que la cédula sea única
     *
     * @param id
     * @return
     */
    public boolean existe(int id) {
        for (int i = 0; i < lista.size(); i++) {
            productos = lista.get(i);
            if (productos.getCodigo() == id) {
                return true;
            }
        }
        return false;
    }

    /**
     * Muestra los datos y títulos en el JTable
     */
    public void mostrarTabla() {
        String titulos[] = {"Código", "Nombre", "Categoría",
            "Precio", "CantDisponible", "Proveedor", "FechaProductoIngresado"};
        model = new DefaultTableModel(null, titulos);
        //No se usó el foreach porque el índice no lo estamos necesitando 
        for (int i = 0; i < lista.size(); i++) {
            productos = lista.get(i);
            Object nuevaFila[] = {productos.getCodigo(), productos.getNombre(),
                productos.getCategoria(), productos.getPrecio(), productos.getCantDisponible(),
                productos.getProveedor(), productos.getFechaPIngresado()};

            model.addRow(nuevaFila);
        }
        tblProductos.setModel(model);

        txtCant.setText(String.valueOf(model.getRowCount()));
    }
//    public LocalDate buscarFechaDespido(int idDespido) {
//        for (Productos d : lista) {
//            if (d.getCedula() == idDespido) {
//                return d.getFechaDespido();
//            }
//        }
//        return null;
//    }

    private void EvaluarCantidadEdit() {
        int cantidadDisponible = Integer.parseInt(txtCantDisponible.getText());

        if (cantidadDisponible >= 1 && cantidadDisponible < 15) {
            JOptionPane.showMessageDialog(
                    null,
                    "El producto " + txtNombre.getText() + " está cerca de agotarse",
                    "Solicitud de reabastecimiento",
                    JOptionPane.WARNING_MESSAGE
            );
        } else if (cantidadDisponible == 0) {
            JOptionPane.showMessageDialog(
                    null,
                    "El producto " + txtNombre.getText() + " ha sido agotado",
                    "Solicitud de reabastecimiento",
                    JOptionPane.WARNING_MESSAGE
            );
        }
    }

    private void EvaluarCantidadInsert() {
        int cantidadDisponible = Integer.parseInt(txtCantDisponible.getText());
        if (cantidadDisponible >= 1 && cantidadDisponible < 15) {
            JOptionPane.showMessageDialog(
                    null,
                    "El producto " + txtNombre.getText() + " ha sido registrado con una cantidad mínima en el inventario, \n(Evalúa el reabastecimiento del producto, \nDe igual manera el producto será registrado)",
                    "Solicitud de mayor cantidad del producto",
                    JOptionPane.WARNING_MESSAGE
            );
        }
    }

    public void limpiar() {
        txtCodigo.setText("");
        txtNombre.setText("");
        txtCategoria.setText("");
        txtPrecio.setText("");
        txtCantDisponible.setText("");
        cmbProveedor.setSelectedIndex(0);
        txtCodigo.requestFocus();
    }

    /**
     * Obtiene la tabla de Productoses.
     *
     * @return Un objeto JTable que representa la tabla de Productoses.
     */
    public JTable getTblProductos() {
        return tblProductos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProductosView dialog = new ProductosView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntBuscarXCategoria;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGenerarPDF;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnTotalInventario;
    private javax.swing.JButton btnVerTDatos;
    private javax.swing.JComboBox<String> cmbProveedor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCant;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblIndicaciónpdf;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPuesto;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtCantDisponible;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
