package vista;

import Modelo.Vista.Vista;
import Modelo.Producto.Productos;
import Modelo.Proveedores.Proveedor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import controlador.ProductosControlador;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author Chrisp
 */
public class ProductosView extends javax.swing.JDialog implements Vista<Productos> {

    private ProductosControlador productosController;
    private Productos producto;
    private DefaultTableModel model;

    public ProductosView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        productosController = new ProductosControlador(this);
        cargarProveedores(); // Cargar los proveedores al iniciar
        productosController.readAll(); // Cargar todos los productos al iniciar
    }

    private void cargarProveedores() {
        cmbProveedor.removeAllItems();
        List<Proveedor> proveedores = productosController.readAllProveedores();
        for (Proveedor p : proveedores) {
            cmbProveedor.addItem(p.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDatos = new javax.swing.JPanel();
        lblCedula = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblDireccion = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPuesto = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        txtCantDisponible = new javax.swing.JTextField();
        cmbProveedor = new javax.swing.JComboBox<>();
        txtCategoria = new javax.swing.JTextField();
        pnlBotones = new javax.swing.JPanel();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnInsertar = new javax.swing.JButton();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        bntBuscarXCategoria = new javax.swing.JButton();
        btnTotalInventario = new javax.swing.JButton();
        lblCant = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        btnGenerarPDF = new javax.swing.JButton();
        btnVerTDatos = new javax.swing.JButton();
        lblIndicaciónpdf = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de Productos ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        pnlDatos.setBackground(new java.awt.Color(0, 51, 102));
        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Registros de Productos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        lblCedula.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCedula.setForeground(new java.awt.Color(242, 242, 242));
        lblCedula.setText("Código:");

        txtCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblNombre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(242, 242, 242));
        lblNombre.setText("Nombre:");

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblDireccion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDireccion.setForeground(new java.awt.Color(242, 242, 242));
        lblDireccion.setText("Categoría:");

        lblTelefono.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTelefono.setForeground(new java.awt.Color(242, 242, 242));
        lblTelefono.setText("Precio:");

        lblEmail.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(255, 255, 255));
        lblEmail.setText("CantidadDisponible:");

        lblPuesto.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPuesto.setForeground(new java.awt.Color(242, 242, 242));
        lblPuesto.setText("Proveedor:");

        pnlBotones.setBackground(new java.awt.Color(255, 127, 0));

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.setBorder(null);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(null);
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEliminar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clean.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setBorder(null);
        btnLimpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLimpiar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnLimpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnInsertar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/insert.png"))); // NOI18N
        btnInsertar.setText("Insertar");
        btnInsertar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnInsertar.setBorderPainted(false);
        btnInsertar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInsertar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnInsertar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonesLayout = new javax.swing.GroupLayout(pnlBotones);
        pnlBotones.setLayout(pnlBotonesLayout);
        pnlBotonesLayout.setHorizontalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotonesLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBotonesLayout.setVerticalGroup(
            pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlBotonesLayout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addGroup(pnlBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13))
        );

        lblBuscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblBuscar.setForeground(new java.awt.Color(255, 255, 255));
        lblBuscar.setText("Buscar productos por categoria:");

        txtBuscar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        bntBuscarXCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        bntBuscarXCategoria.setBorder(null);
        bntBuscarXCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntBuscarXCategoriaActionPerformed(evt);
            }
        });

        btnTotalInventario.setBackground(new java.awt.Color(255, 127, 0));
        btnTotalInventario.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTotalInventario.setForeground(new java.awt.Color(255, 255, 255));
        btnTotalInventario.setText("Total Inventario");
        btnTotalInventario.setBorder(null);
        btnTotalInventario.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTotalInventario.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnTotalInventario.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTotalInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalInventarioActionPerformed(evt);
            }
        });

        lblCant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCant.setForeground(new java.awt.Color(255, 255, 255));
        lblCant.setText("Cantidad de registros:");

        txtCant.setEditable(false);
        txtCant.setBackground(new java.awt.Color(204, 204, 204));
        txtCant.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        tblProductos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblProductos.getTableHeader().setReorderingAllowed(false);
        tblProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblProductosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblProductos);

        btnGenerarPDF.setBackground(new java.awt.Color(255, 127, 0));
        btnGenerarPDF.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerarPDF.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerarPDF.setText("Generar PDF");
        btnGenerarPDF.setBorder(null);
        btnGenerarPDF.setBorderPainted(false);
        btnGenerarPDF.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGenerarPDF.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnGenerarPDF.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPDFActionPerformed(evt);
            }
        });

        btnVerTDatos.setBackground(new java.awt.Color(255, 127, 0));
        btnVerTDatos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnVerTDatos.setForeground(new java.awt.Color(255, 255, 255));
        btnVerTDatos.setText("Ver");
        btnVerTDatos.setBorder(null);
        btnVerTDatos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVerTDatos.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnVerTDatos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnVerTDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerTDatosActionPerformed(evt);
            }
        });

        lblIndicaciónpdf.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBotones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addComponent(lblBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bntBuscarXCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlDatosLayout.createSequentialGroup()
                                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCedula)
                                    .addComponent(lblNombre))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlDatosLayout.createSequentialGroup()
                                .addComponent(lblDireccion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPuesto)
                            .addComponent(lblEmail)
                            .addComponent(lblTelefono))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCantDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addComponent(lblIndicaciónpdf, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addComponent(lblCant)
                        .addGap(18, 18, 18)
                        .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVerTDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTotalInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCedula)
                        .addComponent(lblTelefono)
                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDatosLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNombre)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEmail)
                                    .addComponent(txtCantDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDireccion)
                            .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPuesto)
                            .addComponent(cmbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscar)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bntBuscarXCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                        .addComponent(lblIndicaciónpdf, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblCant)
                                .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnVerTDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnTotalInventario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 609, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        try {
            int codigo = Integer.parseInt(txtCodigo.getText().trim());
            String nombre = txtNombre.getText().trim();
            String categoria = txtCategoria.getText().trim();
            double precio = Double.parseDouble(txtPrecio.getText().trim());
            int cantidad = Integer.parseInt(txtCantDisponible.getText().trim());
            String proveedorNombre = (String) cmbProveedor.getSelectedItem();

            if (nombre.isEmpty() || categoria.isEmpty() || proveedorNombre == null) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int proveedorId = obtenerIdProveedor(proveedorNombre);

            // Evaluar la cantidad insertada
            txtNombre.setText(nombre); // Para que el mensaje pueda usar el nombre
            txtCantDisponible.setText(String.valueOf(cantidad)); // Para EvaluarCantidadInsert
            EvaluarCantidadInsert();

            producto = new Productos(codigo, nombre, categoria, precio, cantidad, proveedorId, null);
            productosController.create(producto);
            limpiar();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, verifica los valores ingresados.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private int obtenerIdProveedor(String nombreProveedor) {
        List<Proveedor> proveedores = productosController.readAllProveedores();
        return proveedores.stream()
                .filter(p -> p.getNombre().equals(nombreProveedor))
                .findFirst()
                .map(Proveedor::getId)
                .orElse(-1);
    }

    private String obtenerNombreProveedor(int idProveedor) {
        List<Proveedor> proveedores = productosController.readAllProveedores();
        return proveedores.stream()
                .filter(p -> p.getId() == idProveedor)
                .findFirst()
                .map(Proveedor::getNombre)
                .orElse("Desconocido");
    }

    private void tblProductosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosMousePressed
        if (evt.getClickCount() == 1) {
            int fila = tblProductos.getSelectedRow();
            txtCodigo.setText(String.valueOf(tblProductos.getValueAt(fila, 0)));
            txtNombre.setText(String.valueOf(tblProductos.getValueAt(fila, 1)));
            txtCategoria.setText(String.valueOf(tblProductos.getValueAt(fila, 2)));
            txtPrecio.setText(String.valueOf(tblProductos.getValueAt(fila, 3)));
            txtCantDisponible.setText(String.valueOf(tblProductos.getValueAt(fila, 4)));
            cmbProveedor.setSelectedItem(tblProductos.getValueAt(fila, 5));
        }
    }//GEN-LAST:event_tblProductosMousePressed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (tblProductos.getSelectedRowCount() == 1) {
            int fila = tblProductos.getSelectedRow();
            int codigo = Integer.parseInt(tblProductos.getValueAt(fila, 0).toString());
            int confirm = JOptionPane.showConfirmDialog(this, "¿Desea borrar el registro?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                producto = new Productos();
                producto.setCodigo(codigo);
                productosController.delete(producto);
                limpiar();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un registro para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tblProductos.getSelectedRowCount() == 1) {
            try {
                int codigo = Integer.parseInt(txtCodigo.getText().trim());
                String nombre = txtNombre.getText().trim();
                String categoria = txtCategoria.getText().trim();
                double precio = Double.parseDouble(txtPrecio.getText().trim());
                int cantidad = Integer.parseInt(txtCantDisponible.getText().trim());
                String proveedorNombre = (String) cmbProveedor.getSelectedItem();

                if (nombre.isEmpty() || categoria.isEmpty() || proveedorNombre == null) {
                    JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int proveedorId = obtenerIdProveedor(proveedorNombre);

                // Evaluar la cantidad editada
                txtNombre.setText(nombre); // Para que el mensaje pueda usar el nombre
                txtCantDisponible.setText(String.valueOf(cantidad)); // Para EvaluarCantidadEdit
                EvaluarCantidadEdit();

                producto = new Productos(codigo, nombre, categoria, precio, cantidad, proveedorId, null);
                productosController.update(producto);
                limpiar();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, verifica los valores ingresados.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un registro para editar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void bntBuscarXCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntBuscarXCategoriaActionPerformed
        String categoriaBuscada = txtBuscar.getText().trim().toLowerCase(); // Obtener la categoría buscada, convertir a minúsculas para hacer una comparación insensible a mayúsculas.

        // Verificar si el campo de búsqueda está vacío
        if (categoriaBuscada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una categoría para buscar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener todos los productos desde el controlador
        List<Productos> productos = productosController.readAll(); // Ahora `readAll()` devuelve una lista

        // Filtrar productos por categoría
        List<Productos> productosFiltrados = new ArrayList<>();
        for (Productos producto : productos) {
            if (producto.getCategoria().toLowerCase().contains(categoriaBuscada)) { // Compara la categoría de manera insensible a mayúsculas
                productosFiltrados.add(producto);
            }
        }

        // Verificar si se encontraron productos que coincidan con la búsqueda
        if (productosFiltrados.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron productos con esa categoría.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
        }

        // Actualizar la tabla con los productos filtrados
        showAll(productosFiltrados);
        btnVisibleTrue();
        limpiar();
    }//GEN-LAST:event_bntBuscarXCategoriaActionPerformed

    private void btnVerTDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerTDatosActionPerformed
        btnVisibleFalse();
        productosController.readAll();
        limpiar();
    }//GEN-LAST:event_btnVerTDatosActionPerformed

    private void btnGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPDFActionPerformed
        // Obtén el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tblProductos.getModel();

        // Verifica si hay filas visibles
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar al PDF.");
            return;
        }

        // Ruta del PDF (escritorio)
        String rutaEscritorio = System.getProperty("user.home") + "/Desktop/";
        String nombreCategoria = txtBuscar.getText().trim(); // Categoría buscada
        String nombreArchivo = "Productos_" + (nombreCategoria.isEmpty() ? "General" : nombreCategoria) + ".pdf";
        String rutaCompleta = rutaEscritorio + nombreArchivo;

        try {
            // Crear el PDF
            PdfWriter writer = new PdfWriter(rutaCompleta);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            // Agregar título
            document.add(new Paragraph("Reporte de Productos")
                    .setBold()
                    .setFontSize(16)
                    .setMarginBottom(10));
            document.add(new Paragraph("Categoría: " + (nombreCategoria.isEmpty() ? "Todos" : nombreCategoria))
                    .setFontSize(12)
                    .setMarginBottom(20));

            // Crear tabla en el PDF
            int columnCount = model.getColumnCount();
            float[] columnWidths = new float[columnCount];
            for (int i = 0; i < columnCount; i++) {
                columnWidths[i] = 100f; // Ajusta el ancho de las columnas si es necesario
            }
            Table pdfTable = new Table(columnWidths);

            // Agregar encabezados al PDF
            for (int i = 0; i < columnCount; i++) {
                pdfTable.addHeaderCell(model.getColumnName(i));
            }

            // Agregar datos visibles de la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < columnCount; j++) {
                    pdfTable.addCell(model.getValueAt(i, j).toString());
                }
            }

            // Agregar tabla al documento
            document.add(pdfTable);

            // Cerrar documento
            document.close();

            // Confirmar éxito
            JOptionPane.showMessageDialog(this, "PDF generado exitosamente en: " + rutaCompleta);
            limpiar();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnGenerarPDFActionPerformed

    private void btnTotalInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalInventarioActionPerformed
        List<Productos> productos = productosController.readAll();

        // Calculate total inventory value
        double totalInventario = productos.stream()
                .mapToDouble(Productos::getPrecio)
                .sum();

        // Display total inventory value in a JOptionPane
        JOptionPane.showMessageDialog(
                this, "Valor total del inventario: " + totalInventario,
                "Valor Total de Inventario", JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_btnTotalInventarioActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        btnVisibleFalse();
    }//GEN-LAST:event_formWindowActivated

    @Override
    public void show(Productos ent) {
        txtCodigo.setText(String.valueOf(ent.getCodigo()));
        txtNombre.setText(ent.getNombre());
        txtCategoria.setText(ent.getCategoria());
        txtPrecio.setText(String.valueOf(ent.getPrecio()));
        txtCantDisponible.setText(String.valueOf(ent.getCantDisponible()));
        cmbProveedor.setSelectedItem(obtenerNombreProveedor((ent.getProveedor())));
    }

    @Override
    public void showAll(List<Productos> productos) {
        String[] titulos = {"Código", "Nombre", "Categoría", "Precio", "Cantidad Disponible", "Proveedor"};
        model = new DefaultTableModel(null, titulos);
        for (Productos p : productos) {
            model.addRow(new Object[]{p.getCodigo(), p.getNombre(), p.getCategoria(), p.getPrecio(), p.getCantDisponible(), obtenerNombreProveedor((p.getProveedor()))});
        }
        tblProductos.setModel(model);
    }

    @Override
    public void showMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Información", JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void showError(String err) {
        JOptionPane.showMessageDialog(this, err, "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public boolean validateRequired() {
        return !txtCodigo.getText().isEmpty() && !txtNombre.getText().isEmpty();
    }

    @Override
    public void showWarnig(String warning) {
        JOptionPane.showMessageDialog(this, warning, "Precación", JOptionPane.WARNING_MESSAGE);
    }

    private void limpiar() {
        txtCodigo.setText("");
        txtNombre.setText("");
        txtCategoria.setText("");
        txtPrecio.setText("");
        txtCantDisponible.setText("");
        cmbProveedor.setSelectedIndex(0);
        txtCodigo.requestFocus();
    }

    private void EvaluarCantidadInsert() {
        try {
            int cantidadDisponible = Integer.parseInt(txtCantDisponible.getText().trim());

            if (cantidadDisponible >= 1 && cantidadDisponible < 15) {
                // Usar el método de la interfaz para mostrar advertencias
                showWarnig(
                        "El producto " + txtNombre.getText() + " ha sido registrado con una cantidad mínima en el inventario. "
                        + "\nEvalúa el reabastecimiento del producto. \nDe igual manera, el producto será registrado."
                );
            } else if (cantidadDisponible == 0) {
                showWarnig(
                        "El producto " + txtNombre.getText() + " ha sido registrado con una cantidad de 0. "
                        + "\nEs necesario realizar un reabastecimiento inmediato."
                );
            }
        } catch (NumberFormatException e) {
            // Manejo de errores si no se ingresa un número válido
            JOptionPane.showMessageDialog(
                    this,
                    "Por favor, ingresa un valor numérico válido para la cantidad disponible.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void EvaluarCantidadEdit() {
        try {
            int cantidadDisponible = Integer.parseInt(txtCantDisponible.getText().trim());

            if (cantidadDisponible >= 1 && cantidadDisponible < 15) {
                // Usar el método de la interfaz para mostrar advertencias
                showWarnig(
                        "El producto " + txtNombre.getText() + " está cerca de agotarse. \nEvalúa un reabastecimiento pronto."
                );
            } else if (cantidadDisponible == 0) {
                showWarnig(
                        "El producto " + txtNombre.getText() + " ha sido agotado. \nEs necesario realizar un reabastecimiento inmediato."
                );
            }
        } catch (NumberFormatException e) {
            // Manejo de errores si no se ingresa un número válido
            JOptionPane.showMessageDialog(
                    this,
                    "Por favor, ingresa un valor numérico válido para la cantidad disponible.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void btnVisibleTrue() {
        btnGenerarPDF.setVisible(true);
        lblIndicaciónpdf.setText("Generar inventario de la categoría mostrada");
        btnGenerarPDF.setText("Generar PDF");
        btnVerTDatos.setVisible(true);
        btnVerTDatos.setText("Todos los datos");
    }

    public void btnVisibleFalse() {
        btnGenerarPDF.setVisible(false);
        btnVerTDatos.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductosView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProductosView dialog = new ProductosView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntBuscarXCategoria;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGenerarPDF;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnTotalInventario;
    private javax.swing.JButton btnVerTDatos;
    private javax.swing.JComboBox<String> cmbProveedor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCant;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblIndicaciónpdf;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPuesto;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtCantDisponible;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

}
